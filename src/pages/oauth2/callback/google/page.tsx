
import { useEffect, useState, useCallback } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import toast from 'react-hot-toast';
import { SignInWithGoogle } from '../../../../services/authService';
import { useAuth } from '../../../../hooks/useAuth';
import AuthCallbackLayout from '../../../../components/Layouts/AuthCallbackLayout';
import AuthLoading from '../../../../components/Auth/AuthLoading';
import AuthError from '../../../../components/Auth/AuthError';

function CallbackGoogle() {
  const navigate = useNavigate();
  const location = useLocation();
  const searchParams = new URLSearchParams(location.search);
  const code = searchParams.get('code');

  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [errorCode, setErrorCode] = useState<string>('');
  const [hasAttempted, setHasAttempted] = useState(false);

  const { login: authLogin } = useAuth();

  const handleSendCode = useCallback(async (code: string) => {
    if (isLoading && hasAttempted) return;
    setHasAttempted(true);

    try {
      const data = await SignInWithGoogle(code);
      if (data.result && data.result.accessToken) {
        localStorage.setItem('accessToken', data.result.accessToken);
        localStorage.setItem('refreshToken', data.result.refreshToken);
        authLogin(data.result);

        toast.success('ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng! üéâ', {
          duration: 3000,
          position: 'top-right',
        });

        setTimeout(() => {
          navigate('/');
        }, 1500);
      } else {
        console.error('Auth response:', data);
        setError('Kh√¥ng th·ªÉ x·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ Google. Vui l√≤ng th·ª≠ l·∫°i sau.');
      }
    } catch (error: unknown) {
      console.error('Google auth error:', error);
      let errorMessage = 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
      let extractedCode = '';

      if (error instanceof Error) {
        errorMessage = error.message;
        const statusMatch = error.message.match(/status:?\s*(\d{3})/i);
        if (statusMatch) {
          extractedCode = statusMatch[1];
        }
      }

      if (extractedCode === '401') {
        setError('Phi√™n x√°c th·ª±c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        setErrorCode('401');
      } else if (extractedCode === '403') {
        setError('T√†i kho·∫£n Google c·ªßa b·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ·ª©ng d·ª•ng n√†y.');
        setErrorCode('403');
      } else if (extractedCode === '500') {
        setError('M√°y ch·ªß ƒëang b·∫£o tr√¨. Vui l√≤ng th·ª≠ l·∫°i sau v√†i ph√∫t.');
        setErrorCode('500');
      } else {
        setError(`L·ªói x√°c th·ª±c Google: ${errorMessage}`);
        setErrorCode(extractedCode || 'UNKNOWN');
      }
    } finally {
      setIsLoading(false);
    }
  }, [navigate, authLogin, isLoading, hasAttempted]);

  const handleRetry = useCallback(() => {
    if (code) {
      setError(null);
      setErrorCode('');
      setIsLoading(true);
      setHasAttempted(false);
      toast.loading('ƒêang th·ª≠ l·∫°i x√°c th·ª±c...', { duration: 2000 });
      handleSendCode(code);
    }
  }, [code, handleSendCode]);

  const handleGoHome = useCallback(() => {
    navigate('/');
  }, [navigate]);

  useEffect(() => {
    if (code && !hasAttempted) {
      handleSendCode(code);
    } else if (!code) {
      setError('Kh√¥ng t√¨m th·∫•y m√£ x√°c th·ª±c. Vui l√≤ng th·ª≠ ƒëƒÉng nh·∫≠p l·∫°i.');
      setErrorCode('AUTH_CODE_MISSING');
      setIsLoading(false);
    }
  }, [code, handleSendCode, hasAttempted]);

  return (
    <AuthCallbackLayout
      title="ƒêƒÉng nh·∫≠p Google"
      description="ƒêang x·ª≠ l√Ω th√¥ng tin x√°c th·ª±c t·ª´ Google"
    >
      {isLoading ? (
        <AuthLoading message="ƒêang x√°c th·ª±c v·ªõi Google" provider="google" />
      ) : error ? (
        <AuthError
          error={error}
          errorCode={errorCode}
          onRetry={code ? handleRetry : undefined}
          onGoHome={handleGoHome}
        />
      ) : (
        <div className="text-center">
          <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg className="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
          </div>
          <h3 className="text-lg font-semibold text-gray-900 mb-2">ƒêƒÉng nh·∫≠p th√†nh c√¥ng!</h3>
          <p className="text-gray-600 text-sm">ƒêang chuy·ªÉn h∆∞·ªõng v·ªÅ trang ch·ªß...</p>
        </div>
      )}
    </AuthCallbackLayout>
  );
}

export default CallbackGoogle;
